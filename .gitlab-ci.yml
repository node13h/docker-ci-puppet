stages:
  - lint
  - test
  - build
  - scan
  - publish

variables:
  SHELLCHECK_CI_IMAGE: docker.io/koalaman/shellcheck-alpine:v0.10.0
  BUILDAH_CI_IMAGE: quay.io/buildah/stable:v1.36.0
  TRIVY_CI_IMAGE: docker.io/aquasec/trivy:0.53.0
  CI_VERSION_TOOLS_IMAGE: docker.io/alikov/ci-version-tools:0.1.2
  TRIVY_NO_PROGRESS: "true"
  # https://aquasecurity.github.io/trivy/v0.49/docs/configuration/filtering/#trivyignoreyaml
  TRIVY_IGNOREFILE: ./.trivyignore.yaml
  DEBIAN_BASE_IMAGE: docker.io/debian:12

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG

.with-registry-login:
  before_script:
    - |
      set -eu
      if [ -n "${CI_REGISTRY_USER:+notempty}" ]; then
          printf -- '%s' "$CI_REGISTRY_PASSWORD" \
              | buildah login \
                        --username "$CI_REGISTRY_USER" \
                        --password-stdin \
                        "$CI_REGISTRY"
      fi

.with-trivy-cache:
  variables:
    TRIVY_CACHE_DIR: ci/cache/trivy
  cache:
    - key: trivy
      paths:
        - $TRIVY_CACHE_DIR

version:
  image:
    name: $CI_VERSION_TOOLS_IMAGE
    entrypoint: [""]
  stage: .pre
  script:
    - project-version
        --version-source-file ./VERSION
        --git-version-tag-prefix v
        --dev-identifier dev
        --dev-nr "${CI_PIPELINE_IID:-0}"
        ${CI_COMMIT_TAG:+--git-tag "$CI_COMMIT_TAG"}
        env-vars | tee version.env
  artifacts:
    reports:
      dotenv:
        - version.env

shellcheck:
  image: $SHELLCHECK_CI_IMAGE
  stage: lint
  script:
    - shellcheck *.sh

.build-image:
  extends: .with-registry-login
  tags:
    - $ARCH
  stage: build
  image: $BUILDAH_CI_IMAGE
  script:
    - buildah () { command buildah --storage-driver=vfs "$@"; }
    - SOURCE_DATE_EPOCH=$(date +%s)
    # This export is for buildah itsef.
    - export SOURCE_DATE_EPOCH
    - buildah build
        --format oci
        --timestamp "$SOURCE_DATE_EPOCH"
        --build-arg BASE_IMAGE="$DEBIAN_BASE_IMAGE"
        --build-arg SOURCE_DATE_EPOCH="$SOURCE_DATE_EPOCH"
        --build-arg GIT_COMMIT_SHA="$CI_COMMIT_SHA"
        --arch "$ARCH"
        -t "${CI_REGISTRY_IMAGE}:${VERSION_SEMVER}-${ARCH}"
        .
    - buildah inspect "${CI_REGISTRY_IMAGE}:${VERSION_SEMVER}-${ARCH}"
    - buildah push "${CI_REGISTRY_IMAGE}:${VERSION_SEMVER}-${ARCH}"
  needs:
    - version

build-image-amd64:
  extends: .build-image
  variables:
    ARCH: amd64

build-image-arm64:
  extends: .build-image
  variables:
    ARCH: arm64

iac-check:
  extends: .with-trivy-cache
  stage: scan
  needs: []
  image:
    name: $TRIVY_CI_IMAGE
    entrypoint: [""]
  script:
    - trivy config --exit-code 3 .

.scan-image:
  extends: .with-trivy-cache
  tags:
    - $ARCH
  stage: scan
  image:
    name: $TRIVY_CI_IMAGE
    entrypoint: [""]
  variables:
    TRIVY_USERNAME: $CI_REGISTRY_USER
    TRIVY_PASSWORD: $CI_REGISTRY_PASSWORD
  script:
    - trivy image "${CI_REGISTRY_IMAGE}:${VERSION_SEMVER}-${ARCH}"
    - trivy image --severity HIGH,CRITICAL --exit-code 3 --ignore-unfixed "${CI_REGISTRY_IMAGE}:${VERSION_SEMVER}-${ARCH}"

scan-amd64:
  extends: .scan-image
  variables:
    ARCH: amd64
  needs:
    - version
    - build-image-amd64

scan-arm64:
  extends: .scan-image
  variables:
    ARCH: arm64
  needs:
    - version
    - build-image-arm64

publish-image:
  extends: .with-registry-login
  stage: publish
  image: $BUILDAH_CI_IMAGE
  script:
    # buildah manifest commands ignore CONTAINERS_REGISTRIES_CONF for some reason.
    - buildah () { command buildah ${CONTAINERS_REGISTRIES_CONF:+--registries-conf "$CONTAINERS_REGISTRIES_CONF"} "$@"; }
    - buildah manifest create "${PUBLISH_IMAGE}:${VERSION_SEMVER}"
    - buildah manifest add "${PUBLISH_IMAGE}:${VERSION_SEMVER}" "${CI_REGISTRY_IMAGE}:${VERSION_SEMVER}-amd64"
    - buildah manifest add "${PUBLISH_IMAGE}:${VERSION_SEMVER}" "${CI_REGISTRY_IMAGE}:${VERSION_SEMVER}-arm64"
    - buildah manifest push --all "${PUBLISH_IMAGE}:${VERSION_SEMVER}" "docker://${PUBLISH_IMAGE}:${VERSION_SEMVER}"
    - printf 'Pushed %s\n' "${PUBLISH_IMAGE}:${VERSION_SEMVER}"
    - if [ -n "${VERSION_IS_LATEST_RELEASE:-}" ]; then
        buildah manifest push "${PUBLISH_IMAGE}:${VERSION_SEMVER}" "docker://${PUBLISH_IMAGE}:latest";
        printf "Pushed %s\n" "${PUBLISH_IMAGE}:latest";
      fi

  needs:
    - version
    - scan-amd64
    - scan-arm64
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+/
    - when: manual
